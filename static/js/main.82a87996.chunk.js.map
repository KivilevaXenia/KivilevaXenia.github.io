{"version":3,"sources":["Button.js","Table.js","App.js","index.js"],"names":["Button","props","number","index","count","useState","isFill","setFill","useEffect","squares","className","onClick","Table","setSquares","isLaunched","isClear","setClear","speed","getSquares","newSquares","i","length","slice","j","result","initRes","width","push","pop","id","setTimeout","neighbours","clearTimeout","map","elem","key","num","change","changeSquare","renderButton","widthArray","renderRow","lengthArray","App","setLaunch","buttonName","clear","setLength","setWidth","setSpeed","type","step","min","max","value","onChange","e","Number","target","ReactDOM","render","document","getElementById"],"mappings":"8RAGe,SAASA,EAAOC,GACjBA,EAAMC,OAAhB,IACIC,EAAQF,EAAME,MACdC,EAAQH,EAAMG,MAHgB,EAIRC,mBAAS,MAJD,mBAI3BC,EAJ2B,KAInBC,EAJmB,KAMlCC,qBAAU,WACFP,EAAMQ,SACHR,EAAMQ,QAAQN,IACbI,EAAQN,EAAMQ,QAAQN,GAAOC,EAAM,MAG5C,CAACH,EAAMQ,UAEV,IAAIC,EAAYJ,EAAQ,OAAS,GAEjC,OACI,4BAAQI,UAAS,iBAAYA,GACrBC,QAAS,WACLV,EAAMU,aClBX,SAASC,EAAMX,GAAQ,IAAD,EACHI,mBAAS,MADN,mBAC1BI,EAD0B,KACjBI,EADiB,KAE7BC,EAAab,EAAMa,WACnBC,EAAUd,EAAMc,QAChBC,EAAWf,EAAMe,SACjBC,EAAQhB,EAAMgB,MAkBlB,SAASC,IAEL,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAIX,EAAQY,OAAQD,IAChCD,EAAWC,GAAKX,EAAQW,GAAGE,QAE/B,OAAOH,EArBXX,qBAAU,WACN,GAAIC,GACIM,EAAS,CAET,IADA,IAAII,EAAa,GACTC,EAAI,EAAGA,EAAIX,EAAQY,OAAQD,IAAK,CACpCD,EAAWC,GAAK,GAChB,IAAK,IAAIG,EAAI,EAAGA,EAAId,EAAQW,GAAGC,OAAQE,IACnCJ,EAAWC,GAAGG,IAAK,EAG3BV,EAAWM,GACXH,OAGT,CAACf,EAAMc,UAUVP,qBAAU,WACN,IAAIgB,EAASf,EAASS,IAAe,GACjCG,EAASpB,EAAMoB,OAASG,EAAOH,OAC/BI,EAAUD,EAAO,GAAKA,EAAO,GAAGH,OAAS,EACzCK,EAAQzB,EAAMyB,MAAQD,EAE1B,GAAIhB,EACKA,EAAQY,QACTR,EAAW,QAEZ,CACH,GAAIQ,EAAS,EACT,IAAK,IAAID,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7BI,EAAOG,KAAK,IACZ,IAAK,IAAIP,EAAI,EAAGA,EAAInB,EAAMyB,MAAON,IAC7BI,EAAOA,EAAOH,OAAS,GAAGM,MAAK,GAI3C,GAAIN,EAAS,EACT,IAAK,IAAID,EAAIX,EAAQY,OAAQD,EAAIX,EAAQY,OAASA,EAAQD,IACtDI,EAAOI,MAIf,GAAI3B,EAAMyB,MAAQF,EAAO,GAAGH,OACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIC,EAAOH,OAAQE,IAC/B,IAAK,IAAIH,EAAI,EAAGA,EAAIM,EAAON,IACvBI,EAAOD,GAAGI,MAAK,GAI3B,GAAI1B,EAAMyB,MAAQF,EAAO,GAAGH,OACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIC,EAAOH,OAAQE,IAC/B,IAAK,IAAIH,EAAII,EAAOD,GAAGF,OAAQD,EAAII,EAAOH,OAASK,EAAON,IACtDI,EAAOD,GAAGK,MAKtBf,EAAWW,MAEhB,CAACvB,EAAMyB,MAAOzB,EAAMoB,SAEvBb,qBAAU,WACN,GAAIC,EAAS,CACT,IAAIU,EAAaD,IACbW,EAAKC,YAAW,WAChB,GAAGhB,EAAY,CACX,IAAK,IAAIM,EAAI,EAAGA,EAAIX,EAAQY,OAAQD,IAChC,IAAK,IAAIG,EAAI,EAAGA,EAAId,EAAQW,GAAGC,OAAQE,IAAK,CACxC,IAAIQ,EAAa,EACbtB,EAAQW,KACJX,EAAQW,GAAGG,EAAI,IACfQ,IAEAtB,EAAQW,GAAGG,EAAI,IACfQ,KAGJtB,EAAQW,EAAI,KACRX,EAAQW,EAAI,GAAGG,EAAI,IACnBQ,IAEAtB,EAAQW,EAAI,GAAGG,IACfQ,IAEAtB,EAAQW,EAAI,GAAGG,EAAI,IACnBQ,KAGJtB,EAAQW,EAAI,KACRX,EAAQW,EAAI,GAAGG,EAAI,IACnBQ,IAEAtB,EAAQW,EAAI,GAAGG,IACfQ,IAEAtB,EAAQW,EAAI,GAAGG,EAAI,IACnBQ,KAIJtB,EAAQW,GAAGG,IAAMQ,EAAa,GAAKA,EAAa,EAChDZ,EAAWC,GAAGG,IAAK,EACXd,EAAQW,GAAGG,IAAqB,IAAfQ,IACzBZ,EAAWC,GAAGG,IAAK,GAI/BV,EAAWM,MAEhBF,GACH,OAAO,kBAAMe,aAAaH,QAiDlC,OACI,yBAAKnB,UAAU,SAxBnB,SAAmBW,GAEf,OAAOA,EAAOY,KAAI,SAACC,EAAM/B,GACrB,OAAO,yBAAKO,UAAU,YAAYyB,IAAKhC,GAM/C,SAAuBuB,EAAOtB,EAAOD,GACjC,OAAOuB,EAAMO,KAAI,WAEb,IAAI/B,IADJE,EACoBD,EAAMF,EAAMyB,MAChC,OAAO,kBAAC,EAAD,CAAQf,QAAU,SAASP,EAAOD,GAAS,OAAO,YAnC5C,SAACiC,EAAKhB,GACvB,IAAIiB,EAAS5B,EAAQa,QACrBe,EAAOjB,GAAGgB,EAAI,IAAMC,EAAOjB,GAAGgB,EAAI,GAClCvB,EAAWwB,GAgC+DC,CAAalC,EAAOD,IAAjE,CAA4EC,EAAOD,GAC7FD,OAAQA,EACRE,MAASA,EACTD,MAAOA,EACPgC,IAAKjC,EACLO,QAASA,OAdnB8B,CAZD,SAACb,GAET,IADA,IAAIc,EAAa,GACRpB,EAAI,EAAGA,EAAIM,EAAON,IACvBoB,EAAWb,KAAK,GAEpB,OAAOa,EAOed,CAAMzB,EAAMyB,OAHtB,EAGqCvB,OAqB5CsC,CAzCI,SAACpB,GAEV,IADA,IAAIqB,EAAc,GACTtB,EAAI,EAAGA,EAAIC,EAAQD,IACxBsB,EAAYf,KAAK,GAErB,OAAOe,EAoCQrB,CAAOpB,EAAMoB,UCjIrBsB,MA9Cf,WAAgB,IAAD,EACqBtC,oBAAS,GAD9B,mBACJS,EADI,KACQ8B,EADR,KAGPC,EAAa/B,EAAY,OAAS,QAH3B,EAIeT,oBAAS,GAJxB,mBAIJyC,EAJI,KAIG9B,EAJH,OAKiBX,mBAAS,GAL1B,mBAKJgB,EALI,KAKI0B,EALJ,OAMe1C,mBAAS,GANxB,mBAMJqB,EANI,KAMGsB,EANH,OAOe3C,mBAAS,KAPxB,mBAOJY,EAPI,KAOGgC,EAPH,KAaX,OACI,yBAAKvC,UAAU,OACX,yBAAKA,UAAU,UAAf,aACA,yBAAKA,UAAU,QACX,yBAAKA,UAAU,UACX,4DACA,6BACI,2BAAOA,UAAU,OAAOwC,KAAK,SAASC,KAAK,IAAItB,GAAG,SAASuB,IAAI,IAAIC,IAAI,KAAKC,MAAOjC,EAAQkC,SAAU,SAACC,GAAD,OAAOT,EAAUU,OAAOD,EAAEE,OAAOJ,WAD1I,IAGI,2BAAO5C,UAAU,OAAOwC,KAAK,SAASC,KAAK,IAAItB,GAAG,QAAQuB,IAAI,IAAIC,IAAI,KAAKC,MAAO5B,EAAO6B,SAAU,SAACC,GAAD,OAAOR,EAASS,OAAOD,EAAEE,OAAOJ,WACnI,+BAGR,yBAAK5C,UAAU,UACX,iDACA,2BAAOA,UAAU,QAAQwC,KAAK,SAASE,IAAI,IAAIE,MAAOrC,EAAOsC,SAAU,SAACC,GAAD,OAAOP,EAASQ,OAAOD,EAAEE,OAAOJ,YAG3G,4BAAQ3C,QAAS,kBAAMiC,GAAW9B,KAAc+B,GAChD,4BAAQlC,QAAS,kBAAMK,GAAS,KAAhC,UAEJ,kBAAC,EAAD,CAAOa,GAAG,QACNf,WAAYA,EACZC,QAAS+B,EACT9B,SA5BK,WACbA,GAAS,IA4BDK,OAAQA,EACRK,MAAOA,EACPT,MAAOA,MCvCvB0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.82a87996.chunk.js","sourcesContent":["import React, {useState, useEffect, useLayoutEffect, useRef} from 'react';\nimport './Button.css';\n\nexport default function Button(props) {\n    let num = props.number - 1;\n    let index = props.index;\n    let count = props.count;\n    const [isFill, setFill] = useState(null);\n\n    useEffect(() => {\n        if (props.squares) {\n            if(props.squares[index]) {\n                setFill(props.squares[index][count-1]);\n            }\n        }\n    }, [props.squares]);\n\n    let className = isFill? 'fill' : '';\n\n    return (\n        <button className={`button ${className}`}\n                onClick={() => {\n                    props.onClick();\n                }}\n        ></button>\n    )\n}\n","import React, {useState, useEffect, useLayoutEffect} from 'react';\nimport './Table.css';\nimport Button from \"./Button\";\n\nexport default function Table(props) {\n    const [squares, setSquares] = useState(null);\n    let isLaunched = props.isLaunched;\n    let isClear = props.isClear;\n    let setClear = props.setClear;\n    let speed = props.speed;\n\n    useEffect(() => {\n        if (squares) {\n            if (isClear) {\n                let newSquares = [];\n                for(let i = 0; i < squares.length; i++) {\n                    newSquares[i] = [];\n                    for (let j = 0; j < squares[i].length; j++) {\n                        newSquares[i][j] = false;\n                    }\n                }\n                setSquares(newSquares);\n                setClear();\n            }\n        }\n    }, [props.isClear]);\n\n    function getSquares() {\n        let newSquares = [];\n        for (let i = 0; i < squares.length; i++) {\n            newSquares[i] = squares[i].slice();\n        }\n        return newSquares;\n    }\n\n    useEffect(() => {\n        let result = squares? getSquares() : [];\n        let length = props.length - result.length;\n        let initRes = result[0] ? result[0].length : 0;\n        let width = props.width - initRes;\n\n        if (squares) {\n            if (!squares.length ) {\n                setSquares([]);\n            }\n        } else {\n            if (length > 0) {\n                for (let i = 0; i < length; i++) {\n                    result.push([]);\n                    for (let i = 0; i < props.width; i++) {\n                        result[result.length - 1].push(false);\n                    }\n                }\n            }\n            if (length < 0) {\n                for (let i = squares.length; i > squares.length + length; i--) {\n                    result.pop();\n                }\n            }\n\n            if (props.width > result[0].length) {\n                for (let j = 0; j < result.length; j++) {\n                    for (let i = 0; i < width; i++) {\n                        result[j].push(false);\n                    }\n                }\n            }\n            if (props.width < result[0].length) {\n                for (let j = 0; j < result.length; j++) {\n                    for (let i = result[j].length; i > result.length + width; i--) {\n                        result[j].pop();\n                    }\n                }\n            }\n\n            setSquares(result);\n        }\n    }, [props.width, props.length]);\n\n    useEffect(() => {\n        if (squares) {\n            let newSquares = getSquares();\n            let id = setTimeout(() => {\n                if(isLaunched) {\n                    for (let i = 0; i < squares.length; i++) {\n                        for (let j = 0; j < squares[i].length; j++) {\n                            let neighbours = 0;\n                            if (squares[i]) {\n                                if (squares[i][j + 1]) {\n                                    neighbours++;\n                                }\n                                if (squares[i][j - 1]) {\n                                    neighbours++;\n                                }\n                            }\n                            if (squares[i - 1]) {\n                                if (squares[i - 1][j + 1]) {\n                                    neighbours++;\n                                }\n                                if (squares[i - 1][j]) {\n                                    neighbours++;\n                                }\n                                if (squares[i - 1][j - 1]) {\n                                    neighbours++;\n                                }\n                            }\n                            if (squares[i + 1]) {\n                                if (squares[i + 1][j + 1]) {\n                                    neighbours++;\n                                }\n                                if (squares[i + 1][j]) {\n                                    neighbours++;\n                                }\n                                if (squares[i + 1][j - 1]) {\n                                    neighbours++;\n                                }\n                            }\n\n                            if (squares[i][j] && neighbours < 2 || neighbours > 3) {\n                                newSquares[i][j] = false;\n                            } else if (!squares[i][j] && neighbours === 3) {\n                                newSquares[i][j] = true;\n                            }\n                        }\n                    }\n                    setSquares(newSquares);\n                }\n            }, speed);\n            return () => clearTimeout(id);\n        }\n    });\n\n    const changeSquare = (num, i) => {\n        let change = squares.slice();\n        change[i][num-1] = !change[i][num-1];\n        setSquares(change);\n    };\n\n    let length = (length) => {\n        let lengthArray = [];\n        for (let i = 0; i < length; i++) {\n            lengthArray.push(1);\n        }\n        return lengthArray;\n    };\n\n    let width = (width) => {\n        let widthArray = [];\n        for (let i = 0; i < width; i++) {\n            widthArray.push(1);\n        }\n        return widthArray;\n    };\n\n    function renderRow(length) {\n        let count = 0;\n        return length.map((elem, index) => {\n            return <div className='board-row' key={index}>\n                {renderButton(width(props.width), count, index)}\n            </div>\n        });\n    }\n\n    function renderButton (width, count, index) {\n        return width.map(function() {\n            count++;\n            let number = count+(index*props.width);\n            return <Button onClick={(function(count, index) { return function() { changeSquare(count, index) }})(count, index)}\n                           number={number}\n                           count = {count}\n                           index={index}\n                           key={number}\n                           squares={squares}\n            />\n        })\n    }\n\n    return (\n        <div className='table'>\n            {renderRow(length(props.length))}\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport Table from './Table';\n\nfunction App() {\n    const [isLaunched, setLaunch] = useState(false);\n\n    let buttonName = isLaunched? 'Stop' : 'Start';\n    const [clear, setClear] = useState(false);\n    const [length, setLength] = useState(4);\n    const [width, setWidth] = useState(4);\n    const [speed, setSpeed] = useState(500);\n\n    let setNoClear = function() {\n        setClear(false)\n    };\n\n    return (\n        <div className='App'>\n            <div className='header'>Life Game</div>\n            <div className='menu'>\n                <div className='filter'>\n                    <label>Choose size of the field:</label>\n                    <div>\n                        <input className='size' type='number' step='1' id='length' min='1' max='20' value={length} onChange={(e) => setLength(Number(e.target.value))}></input>\n                        X\n                        <input className='size' type='number' step='1' id='width' min='1' max='20' value={width} onChange={(e) => setWidth(Number(e.target.value))}></input>\n                        <br></br>\n                    </div>\n                </div>\n                <div className='filter'>\n                    <label>Set speed (ms)</label>\n                    <input className='speed' type='number' min='0' value={speed} onChange={(e) => setSpeed(Number(e.target.value))}></input>\n                </div>\n\n                <button onClick={() => setLaunch(!isLaunched)}>{buttonName}</button>\n                <button onClick={() => setClear(true)}>Clear</button>\n            </div>\n            <Table id='table'\n                isLaunched={isLaunched}\n                isClear={clear}\n                setClear={setNoClear}\n                length={length}\n                width={width}\n                speed={speed}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}